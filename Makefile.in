
DISTDIR = ..
SETUP_VERSION = @SETUP_VERSION_MAJOR@.@SETUP_VERSION_MINOR@.@SETUP_VERSION_RELEASE@
PACKAGE = setup-$(SETUP_VERSION)

@SET_MAKE@
arch := @ARCH@
libc := @LIBC@
os   := @OS@

# If you modify this version, change it's setup.xml and release a new patch.
UNINSTALL_VERSION = 1.0.3

CC = @CC@

# This indicates where the 'setupdb' CVS module is checked out
SETUPDB	= @SETUPDB@

IMAGE = /loki/patch-tools/setup-image
UPDATES = /loki/updates/loki_uninstall
CONVERT_IMAGE = /loki/patch-tools/convert-image

# The supported locales so far
LOCALES = fr de es sv it nl

OPTIMIZE = @CFLAGS@
HEADERS = -I/usr/X11R6/include -I/usr/local/include
OPTIONS = -DSTUB_UI -DSETUP_VERSION_MAJOR=@SETUP_VERSION_MAJOR@ \
		  -DSETUP_VERSION_MINOR=@SETUP_VERSION_MINOR@ \
		  -DSETUP_VERSION_RELEASE=@SETUP_VERSION_RELEASE@ \
		  -DSETUP_VERSION=\"$(SETUP_VERSION)\"

CFLAGS += $(OPTIMIZE) $(HEADERS) $(OPTIONS)

COMMON_OBJS = log.o install_log.o
OBJS 		= $(COMMON_OBJS) main.o detect.o plugins.o network.o install.o copy.o file.o loki_launchurl.o
LOKI_UNINSTALL_OBJS = loki_uninstall.o uninstall_ui.o
UNINSTALL_OBJS 		= uninstall.o
CONSOLE_OBJS 		= $(OBJS) console_ui.o
GUI_OBJS 			= $(OBJS) gtk_ui.o

SRCS = $(OBJS:.o=.c) $(CONSOLE_OBJS:.o=.c) $(GUI_OBJS:.o=.c)

LIBS = plugins/libplugins.a $(SETUPDB)/$(arch)/libsetupdb.a @LIBS@ -lz
GUI_LIBS = plugins/libplugins.a $(SETUPDB)/$(arch)/libsetupdb.a @GUI_LIBS@ -lz
CONSOLE_LIBS = $(LIBS)

all: do-plugins setup setup.gtk uninstall

testxml: testxml.o
	$(CC) -o $@ $^ $(LIBS)

loki_uninstall.o: uninstall.c
	$(CC) -c -o $@ $^ $(CFLAGS) -DUNINSTALL_UI -DVERSION=\"$(UNINSTALL_VERSION)\"

loki_uninstall: $(LOKI_UNINSTALL_OBJS) $(SETUPDB)/$(arch)/libsetupdb.a
	$(CC) -o $@ $^ $(GUI_LIBS)

uninstall: $(UNINSTALL_OBJS) $(SETUPDB)/$(arch)/libsetupdb.a
	$(CC) -o $@ $^ $(CONSOLE_LIBS) -static

setup:	$(CONSOLE_OBJS) $(SETUPDB)/$(arch)/libsetupdb.a
	$(CC) -o $@ $^ $(CONSOLE_LIBS) -static

setup.gtk: $(GUI_OBJS) $(SETUPDB)/$(arch)/libsetupdb.a
	$(CC) -o $@ $^ $(GUI_LIBS)

do-plugins:
	$(MAKE) -C plugins all

install.dbg: all
ifeq ($(DYN_PLUGINS),true)
	$(MAKE) -C plugins install.dbg
endif
	@if [ -d image/setup.data/bin/$(os)/$(arch)/$(libc) ]; then \
	    cp -v setup image/setup.data/bin/$(os)/$(arch); \
	    cp -v uninstall image/setup.data/bin/$(os)/$(arch); \
	    cp -v setup.gtk image/setup.data/bin/$(os)/$(arch)/$(libc); \
	fi

install: all
ifeq ($(DYN_PLUGINS),true)
	$(MAKE) -C plugins install
endif
	@if [ -d image/setup.data/bin/$(os)/$(arch)/$(libc) ]; then \
	    cp -v setup image/setup.data/bin/$(os)/$(arch); \
	    strip image/setup.data/bin/$(os)/$(arch)/setup; \
	    brandelf -t $(os) image/setup.data/bin/$(os)/$(arch)/setup; \
	    cp -v uninstall image/setup.data/bin/$(os)/$(arch); \
	    strip image/setup.data/bin/$(os)/$(arch)/uninstall; \
	    brandelf -t $(os) image/setup.data/bin/$(os)/$(arch)/uninstall; \
	    cp -v setup.gtk image/setup.data/bin/$(os)/$(arch)/$(libc); \
	    strip image/setup.data/bin/$(os)/$(arch)/$(libc)/setup.gtk; \
	else \
		echo No directory to copy the binary files to.; \
	fi

install-image: all
ifeq ($(DYN_PLUGINS),true)
	$(MAKE) -C plugins install
endif
	@if [ -d $(IMAGE)/setup.data/bin/$(os)/$(arch)/$(libc) ]; then \
	    cp -v setup $(IMAGE)/setup.data/bin/$(os)/$(arch); \
	    strip $(IMAGE)/setup.data/bin/$(os)/$(arch)/setup; \
	    brandelf -t $(os) $(IMAGE)/setup.data/bin/$(os)/$(arch)/setup; \
	    cp -v uninstall $(IMAGE)/setup.data/bin/$(os)/$(arch); \
	    strip $(IMAGE)/setup.data/bin/$(os)/$(arch)/uninstall; \
	    brandelf -t $(os) $(IMAGE)/setup.data/bin/$(os)/$(arch)/uninstall; \
		if [ $(os) = Linux ]; then \
	    	cp -v uninstall $(CONVERT_IMAGE)/bin/$(os)/$(arch); \
	    	strip $(CONVERT_IMAGE)/bin/$(os)/$(arch)/uninstall; \
	    	brandelf -t $(os) $(CONVERT_IMAGE)/bin/$(os)/$(arch)/uninstall; \
		fi; \
	    cp -v setup.gtk $(IMAGE)/setup.data/bin/$(os)/$(arch)/$(libc); \
	    strip $(IMAGE)/setup.data/bin/$(os)/$(arch)/$(libc)/setup.gtk; \
	else \
		echo No directory to copy the binary files to.; \
	fi

install-loki_uninstall: loki_uninstall
	@if [ -d $(IMAGE)/loki_uninstall/bin/$(arch)/$(libc)/ ]; then \
	    cp -v loki_uninstall $(IMAGE)/loki_uninstall/bin/$(arch)/$(libc)/; \
	    strip $(IMAGE)/loki_uninstall/bin/$(arch)/$(libc)/loki_uninstall; \
	    cp -v README.loki_uninstall $(IMAGE)/loki_uninstall/README; \
	    cp -v icon.xpm uninstall.glade $(IMAGE)/loki_uninstall/; \
	    for file in `find image/setup.data -name loki-uninstall.mo -print`; \
	    do  path="$(IMAGE)/loki_uninstall/`dirname $$file | sed 's,image/setup.data/,,'`"; \
	        mkdirhier $$path; \
	        cp -v $$file $$path; \
	    done; \
	else \
		echo No directory to copy the binary files to.; \
	fi
	@if [ -d $(UPDATES) ]; then \
	    rm -rf $(UPDATES)/bin-$(arch)-$(UNINSTALL_VERSION)/; \
	    mkdir $(UPDATES)/bin-$(arch)-$(UNINSTALL_VERSION)/; \
	    cp -v loki_uninstall $(UPDATES)/bin-$(arch)-$(UNINSTALL_VERSION)/; \
	    strip $(UPDATES)/bin-$(arch)-$(UNINSTALL_VERSION)/loki_uninstall; \
	    rm -rf $(UPDATES)/data-$(UNINSTALL_VERSION)/; \
	    mkdir $(UPDATES)/data-$(UNINSTALL_VERSION)/; \
	    cp -v README.loki_uninstall $(UPDATES)/data-$(UNINSTALL_VERSION)/README; \
	    cp -v icon.xpm uninstall.glade $(UPDATES)/data-$(UNINSTALL_VERSION)/; \
	    for file in `find image/setup.data -name loki-uninstall.mo -print`; \
	    do  path="$(UPDATES)/data-$(UNINSTALL_VERSION)/`dirname $$file | sed 's,image/setup.data/,,'`"; \
	        mkdirhier $$path; \
	        cp -v $$file $$path; \
	    done; \
	fi

po-image:
	for lang in $(LOCALES); do \
		cp -f image/setup.data/locale/$$lang/LC_MESSAGES/*.mo $(IMAGE)/setup.data/locale/$$lang/LC_MESSAGES/; \
		cp -f image/setup.data/locale/$$lang/LC_MESSAGES/loki-uninstall.mo $(CONVERT_IMAGE)/locale/$$lang/LC_MESSAGES/; \
	done

clean:
	$(MAKE) -C plugins clean
	rm -f foo.xml core tags *.o

distclean: clean
	rm -f Makefile config.cache config.status config.log
	rm -f setup setup.gtk uninstall loki_uninstall testxml

dist: distclean
	cp -r . $(DISTDIR)/$(PACKAGE)
	(cd $(DISTDIR)/$(PACKAGE) && rm -r `find . -name CVS`)
	(cd $(DISTDIR)/$(PACKAGE) && rm -r `find . -name .cvsignore`)
	(cd $(DISTDIR) && tar zcvf $(PACKAGE).tar.gz $(PACKAGE))
	rm -rf $(DISTDIR)/$(PACKAGE)

po/setup.po: $(SRCS) image/setup.data/setup.glade
	libglade-xgettext image/setup.data/setup.glade > po/setup.po
	xgettext -p po -j -d setup --keyword=_ $(SRCS) plugins/*.c

po/loki-uninstall.po: uninstall.c uninstall_ui.c uninstall.glade
	libglade-xgettext uninstall.glade > po/loki-uninstall.po
	xgettext -p po -j -d loki-uninstall --keyword=_ uninstall.c uninstall_ui.c

gettext: po/setup.po po/loki-uninstall.po
	for lang in $(LOCALES); do \
		msgfmt -f po/$$lang/setup.po -o image/setup.data/locale/$$lang/LC_MESSAGES/setup.mo; \
		msgfmt -f po/$$lang/loki-uninstall.po -o image/setup.data/locale/$$lang/LC_MESSAGES/loki-uninstall.mo; \
	done

# This rule merges changes from the newest PO file in all the translated PO files
update-po: po/setup.po po/loki-uninstall.po
	for lang in $(LOCALES); do \
		msgmerge po/$$lang/setup.po po/setup.po > po/$$lang/tmp; \
		mv po/$$lang/tmp po/$$lang/setup.po; \
		msgmerge po/$$lang/loki-uninstall.po po/loki-uninstall.po > po/$$lang/tmp; \
		mv po/$$lang/tmp po/$$lang/loki-uninstall.po; \
	done

dep: depend

depend:
	$(MAKE) -C plugins depend
	$(CC) -MM $(CFLAGS) $(SRCS) > .depend

ifeq ($(wildcard .depend),.depend)
include .depend
endif
