
The setup XML specification has the following format:

-----
<?xml version="1.0" standalone="yes"?>
<install>
  one or more install options
</install>
----
An example product specification file is at the bottom of this document.


The INSTALL element:

The install element contains one or more OPTION elements specifying
different install options.

All attribute names are case-sensitive, and are lower-case.
 
There are several required attributes of the install element:

 product    This is used as the product name and as the default top-level
            install directory name.

 desc       This is used a product description string, and is used in
            strings naming the product (title bar, icon description, etc.)

 version    This is the product version string

There are several optional attributes of the install element:

 path       This contains the default directory which will contain the
            product installation directory.  The installation directory
            may be changed by the user at installation time.
            The default is: /usr/local/games

 preinstall This is a shell script which is executed before any options
            are installed.  It is run with the installation destination
            as a command line argument.

 postinstall
            This is a shell script which is executed after all options
            are installed.  It is run with the installation destination
            as a command line argument.

            Both the preinstall and postinstall scripts are run with
            some default environment variables set. Look at the 'SCRIPT'
            section below for a detailed list.

 preuninstall 
            This is a shell script which is executed at the very beginning
            of the uninstall process. It will be run before any RPM uninstall
            scripts. This file is not installed, but is added to the
            beginning of uninstall script.

 postuninstall 
            This is a shell script which is executed at the very end of the 
            uninstall process. It will be run after any RPM uninstall
            scripts. This file is not installed, but is added to the
            end of the uninstall script.

            Both the preuninstall and postuninstall scripts will have access
            to the default environment variables. See the 'SCRIPT' section
            for details. 

            Also, these scripts will be run at the very beginning and very 
            end of the install cleanup if the install is aborted.

 eula       This is a file which contains a text license agreement that
            must be agreed to by the user before the installation will
            proceed.
            *OBSOLETE* DO NOT USE! Starting from version 1.3.0, use the
            EULA element instead (see below).

 readme     This is the README file for the product, the user will be
            prompted to see it before the installation begins. The default
            value is "README" if not specified and such a file is
            actually present.
            *OBSOLETE* DO NOT USE! Starting from version 1.3.0, use the
            README element instead (see below).

 splash     Use this tag to specify an alternate splash image (displayed to
            the left of the installer in X11). The image must be in XPM format,
            and the default name for this attribute is "splash.xpm".

 url        This is a web site which is launched after the install is
            completed.

 update_url This is the location where updates for this product can be
            fetched from.

 localurl   This is the local HTML file that is loaded if the network
            is down, or the web site cannot be reached.  It should be
            specified as a path relative to the setup working directory.
            This is a secondary URL, and should not be specified without
            also specifying a primary URL in the "url" attribute.

 auto_url   This is a flag which tells whether or not to automatically
            launch the web browser on the product URL.  It can be either
            "true" to launch the browser, or "false" to prompt the user.
            The default behavior is to prompt the user as to whether or
            not to launch the web browser.

 cdrom      If this attribute has the value "required", then setup will
            prompt the user asking them to mount the product CDROM.
            *NEW* : The 'cdromfile' attribute must also be set.

 cdromfile  This is a (now mandatory) unique file that is looked for on the
            mounted CDROM to see if it is indeed the product CDROM.
            This attribute must always be set if the 'cdrom' attribute is used.

 nouninstall This is an optional flag which, if specified, tells setup
             not to generate an uninstall script after it runs. It also
             doesn't generate any data for product queries and auto-updating.

 uninstall  This attribute is used to change the name of the generated
            'uninstall' script. If not used, the script will always be
            named 'uninstall', which can be a problem if you need to
            install different products in the same directory.
            *THIS ATTRIBUTE IS DEPRECATED AS OF SETUP 1.5.0*

 nobinaries When set to "yes", then setup won't prompt the user for a
            path for binaries. Set this when this installation won't
            actually install any binary file.

 promptbinaries When set to "yes", setup will create a checkbox
                to allow the user whether or not to create 
                a symbolic link to the binaries.

                This setting has no effect if nobinaries is "yes".

 meta       When this attribute is set to "yes", then setup will act as
            a meta-installer, i.e. it will allow the user to select a
            product and set-up will respawn itself for the selected
            product installation.
            See the section "About Meta-Installation" below.

 component  When this attribute is present, its value is the name of the component
            that will created by this installer. This means that the files will be added
            to an existing installation of the product, and that basic configuration parameters
            such as the installation path will be used from the previous installation.
            Currently setup is not able to update an existing component, thus if the component
            is detected as already installed the installation will fail.
            Important: This attribute can't be mixed with <component> elements.

The CDROM element:

An installer can fetch the necesary data files from one or more CDROM discs. As of setup 1.5.0,
each available CDROM must be described through a <cdrom> element, and the 'cdromid' attributes 
of the <binary> and <files> elements.

This element takes two mandatory attributes :

  id        An unique identifier that will be used to reference this CDROM in other elements.

  name      A string describing the CDROM, intended to be prompted to the user.

The file name given in the CDROM element is the path to a unique file on the described CDROM that
will be used to identify the media. Here is an example :

 <cdrom id="cd1" name="Disc Number One">cdrom1.dat</cdrom>
 <cdrom id="cd2" name="Disc Number Two">cdrom2.dat</cdrom>

This describes two CDROMs, and the presence of one of the .dat files at the root of each CDROM will
identify which CDROM is which.

Hint: To avoid useless CD prompts to the user, when using a multiple CDROM installer you should always
specify the size of the files in the XML file directly. This way the user won't have to swap CDs when
the installer is trying to compute the total size of the options.

The user can define at runtime the path to CD images by using the environment variables
SETUP_CDROM_xxx, where xxx is the upper-case ID for the CDROM, i.e. SETUP_CDROM_CD1 for the
first CD of the above example. The SETUP_CDROM environment variable can also be used and it will
be used to match all CDROMs, if you can have all CD images under the same directory.


The COMPONENT element:

Components are used to divide the product in independant entities. Several components can be
installed at the same time by setup, and the user interface will reflect that. The installation
options have to be structured as children of this element.

This element takes two mandatory attributes :

  name      The name of the component.

  version   A string describing the version of the component.

There are also optional attributes : 

  default   If 'yes' then the component is marked as being the default component, i.e. the main
            component for the product. It has to be defined in one of the components.

  showname  If 'yes' then the component name will be displayed in the user interface.

  arch      This component is only available on the specified architectures.
            The architecture can be any of:
               x86, ppc, alpha, sparc64, etc.

  libc      This component is only available with the specified version of libC.
            The version can be one of:
               libc5, glibc-2.0, glibc-2.1, etc.

The README and EULA elements:

Those elements are used to mark special files, that are unique for
each program and are always installed in the installation directory.
Those are of course optional. The README tag specifies the program's
README file. The EULA should specify the End-User License Agreement or
license associated with the program, and it will be the first thing
that the user will be prompted with.

Both elements take an optional attribute :

 lang        Specify a locale, so that you can have different EULAs and
             READMEs translated in many languages in the same distribution.
             See 'About localization' below for more details.

The important thing to remember about those elements is that they are
siblings of the OPTION element described below, and thus direct children
of the INSTALL element. Those elements should NOT be inside an OPTION
element, alongside 'file' and 'binary' elements.

There is also no need to have the files designated by those tags explicitly
installed in a FILES section, setup will take care of that for you.


The INSTALL_DROP_LIST element:

The install_drop_list element makes it possible to override the default
installation paths supplied in the Installation target drop down box.

Supply a list of drop down paths, space or new line separated.
An example follows:

    <install_drop_list>
        /opt /usr/local
        /var
        ~
    </install_drop_list>

If no install_drop_list element is given, it will default to hard coded
values (see install.c).

Note:  Your paths will not be displayed if they are not valid,
writable paths.



The OPTION element:

The option element contains text describing the element, along with
zero or more option, binary, files, and script elements.

There is currently no way to specify relationships of options at the
same level;  each may be installed independently of any other.  If
an option is dependent upon another option, it must be inside the
body of that option:

    <option>
        Top-level option
        <lang lang="locale">Translated 'Top-level option'</lang>
        <option>
            First dependent option
            <lang lang="locale">Translated 'First dependent option'</lang>
        </option>
        <option>
            Second dependent option
        </option>
    </option>

Nested options will not be available unless the top-level option is
selected.

There are several optional attributes of the option element:

 install    If this attribute is set to "true", then the option will
            be installed by default.  It may be deselected by the user.

 required   If this attribute is set to "true", the option will always
            be installed. The user won't be able to disable it.

 help       This attribute is a help string which is displayed to the
            user if the user requests more information about the option.
            This string can be translated to other languages using the 'help'
            sub-element explained below.

 arch       This option is only available on the specified architectures.
            The architecture can be any of:
               x86, ppc, alpha, sparc64, etc.

 libc       This option is only available with the specified version of libC.
            The version can be one of:
               libc5, glibc-2.0, glibc-2.1, etc.

 size       This is an optional size of the install option. The size can be
            expressed in megabytes (with a M suffix), kilobytes (K), gigabytes
            (G), or even bytes (B, or no suffix). Please note that versions of
            setup earlier than 1.3.0 used to specify the size in MBs only.
            If this element isn't specified, setup  will try to autodetect
            the size of the install option itself.

 product    If this XML file describes a meta-installation (if the 'meta' attribute
            to the root install element has been specified), then the value of this
            attribute is used to specify the XML file that will be passed to setup
            to install the product described by this option element. This attribute
            is ignored if this is not a meta-installation, and required if it is.
            See the section 'About Meta-Installations' below for more details.

The option element support the LANG sub-element, which is used to specify
translated strings for the option name. The only attribute of this element
is 'lang', which should be the name of the locale to be matched against
the current locale (i.e. "fr", "de", "it", etc...). See 'About localization'
below for more details about locale matching.

If you don't specify translations for alternate locales, then the same
string will be used for all languages encountered by setup. Of course,
you can have several 'lang' elements per 'option' element.

The option element also supports the HELP sub-element, which can be used
to provide translated strings for the 'help' attribute. This element
only supports the 'lang' attribute to specify the locale this translation
applies to. Here is an example to clarify all this :

<option install="true" help="You really need this">
    Basic install
    <help lang="fr">Vous avez besoin de cela</help>
    <help lang="es">Su necesito eso</help>
    ...
</option>

This provides French and Spanish translations of the "You really need this"
help message. Please forgive my very poor Spanish ;-)

The EXCLUSIVE element:

This special element is used to describe a set of OPTION elements that are
mutually exclusive, i.e. only one of them may be selected and installed.

Its usage is very simple; just surround the group of options with an
encompassing 'exclusive' element, as such :

<exclusive>
 <option install="true">
   Option A
 </option>
 ...
 <option>
   Option X
 </option>
</exclusive>


WARNING: You should always define a default option within the group of
exclusive options, by setting its 'install' attribute to 'true'.

So far, the EXCLUSIVE element does not have any attribute.


The BINARY element:

The binary element contains one or more binary files to be installed for
this option.  The binary is installed in the top level of the install
directory, and if the symlink attribute is set, a symbolic link is
placed in the system executable path.

The actual file that is copied resides in bin/<arch>/<libc>/, where
"<arch>" is the current architecture string (x86, ppc, alpha, etc.)
and "<libc>" is an optional C library version (glibc-2.0, glibc-2.1, etc.)

For example, if you wanted to install an executable file named "foo"
on a PPC system, you would need it on the install disk as bin/ppc/foo.
If it depended upon version 2.1 of the GNU C library, you would place
it on the install disk as bin/ppc/glibc-2.1/foo.

There are several required attributes of the binary element:

 arch       "any" is synonymous with the current architecture. You can also
            use this attribute to force a precise architecture, for example
            "ppc" or "sparc64".

 libc       "any" is synonymous with the current libc version. This can
            also be used to force a libc version for the binary, i.e
            "glibc-2.0" or "glibc-2.1".

There are several optional attributes of the binary element:

 symlink    This is a symbolic link that is installed in the system path
            and points to the installed binary.

 play       If this attribute has the 'yes' value, then this is the binary
            that will be used to optionally launch the game after the
            installation program terminates. There can be only one 'binary'
            element with this attribute in the whole XML file.
            If this attribute has the 'no' value, and a 'symlink' is defined,
            then this binary will explicitly not be used to launch after
            the installation. The default value for this attribute is 'yes'
            for the first binary with a symlink.

 icon       This is an optional icon file that you should install into
            the top level of the install directory.  If both a symlink
            and an icon are specified for a binary, it will also have a
            desktop icon or menu item created for it, if the user wishes.

 menu       This is an optional submenu that the application menuitem is
            installed into.  If no submenu is defined, the menu item will
            be placed in the "Games" submenu.

 name       This is an optional name for the menu entry.  By default the
            name of the product is used. 

 desc       This is an optional description for the menu entry.  By default the
            description of the product is used. 

 cdrom      If this attribute has a "yes" value, then setup will look for
            the file on one of the mounted CDROMs on the system.
            *OBSOLETE in setup 1.5.0* DO NOT USE

 cdromid    Specifies a CDROM from which the file will be pulled.

 keepdirs   If this attribute has a "yes" value, then the directory structure
            specified in the file names for the binaries will be kept. For
            example: bin/mybin will be extracted in the 'bin' subdirectory
            under the installation directory, instead of being extracted in
            the installation directory itself.

 lang       The files are only installed if the current locale matches the
            string of this attribute. See 'About localization' below for
            more details.

 binpath    Specifies an optional directory from which the binaries will be pulled,
            instead of the default "bin/<arch>/<libc>" directory.

 inrpm      If inrpm="true" then setup will not attempt to copy the file, but 
            it will assume that it was successfully installed by an RPM
            package. Setup will set up the symlink and menu items for it. 
            For this to work, the value inside the <binary> tag should be the 
            installed location of the binary file. If the RPM is being 
            relocated to the install directory (see 'FILES' below for details) 
            you can use a macro $INSTALLDIR which will be expanded at runtime.
            So, if you have a file that the RPM installs into [installdir]/bin
            the XML would look like this:
              <binary inrpm="true" symlink="app">
                  $INSTALLDIR/bin/app
              </binary>
            Note that the <files> section which contains the RPM pacakge must
            appear before the <binary> tag to ensure that the file exists
            before the symlink and menu items are created.

The FILES element:

The files element contains a list of files and directories, one per line,
which are installed for this option.

You may specify relative paths and shell wildcard patterns for the files.

There are several optional attributes of the files element:

 path       This is a system path that these files should be installed into.
            If the path is relative (i.e. does not begin with '/'), then it
            is interpreted as being relative to the installation root for
            the product. Thus an empty value ("") can be used to designate
            the installation directory.

 cdrom      If this attribute has a "yes" value, then setup will look for
            the files on one of the mounted CDROMs on the system.
            *OBSOLETE: Do not use. Use 'cdromid' instead.*

 cdromid    Specifies a CDROM from which the file will be pulled.

 lang       The files are only installed if the current locale matches the
            string of this attribute. See 'About localization' below for
            more details.

 relocate   If relocate="true" and an RPM package file is listed, the install
            will force the RPM to be installed into the user-selected install 
            directory. This is equivalent to installing the RPM like this: 
              rpm -U --relocate /=INSTALLDIR --badreloc [rpmfile]
            This will apply to all RPM files within this <files> tag.

 nodeps     If nodeps="true" and an RPM package file is listed,then the
            --nodeps option will be added to the RPM command when the files 
            are installed. This will force RPM to install the package, even if
            its dependencies are not met. This will apply to all RPM files
            within this <files> tag.
 
 autoremove If autoremove="true" and an RPM package file is listed in the 
            files section, then that RPM package will be automatically removed
            ("rpm -e package") when the uninstall script is run. If the 
            autoremove option is not set, then the uninstall script will list 
            the package name at the end of the uninstall, but it will not 
            remove it. This will apply to all RPM files within this <files> 
            tag.

The SCRIPT element:

The script element contains shell commands which are executed when the
option is installed.  You may interleave multiple script and files
elements, and they will be installed/executed in the order in which
they appear.

If you call a script on the installation medium, remember that the
medium may be mounted without executable permissions, so the script
file should be called using the name of the script interpreter.

For example:

    <script>
        sh setup.data/stage1.sh
    </script>

There only supported attribute for the script element is the 'lang' element:

 lang       The script is only installed if the current locale matches the
            string of this attribute. See 'About localization' below for
            more details.

The following environment variables are defined while in the shell script:
    SETUP_PRODUCTNAME   : Product name from the XML file
    SETUP_PRODUCTVER    : Product version from the XML file
    SETUP_COMPONENTNAME : Name of the product component this script belongs to
    SETUP_COMPONENTVER  : Version of the product component
    SETUP_INSTALLPATH   : Installation path of the data files
    SETUP_SYMLINKSPATH  : Path where symbolic links for the binary files
                          will be placed.
    SETUP_CDROMPATH     : Path where the install CD-ROM is mounted, if
                          the XML file designates that some components
                          are to be installed from CD-ROM.

About localization :

The 'lang' values are matched against the value of the LANG environment
variable. The special value 'none' is matched only when there is no LANG
environment variable set (the default locale).

A locale is matched if the specified value is found at the beginning of
LANG. For example, "fr" will match both the "fr" and "fr_CA" values. In
order for the more specialized locale values to be matched correctly,
the longer values should be be specified last (i.e. if you have different
translations, list "fr" before "fr_CA" in the XML file).


About Meta-Installations :

Loki Setup allows you to install several products from the same interface.
This is achieved by defining a top-level "meta-installation" XML file, that
will contain a list of products in the "option" elements. The user will then
be prompted to choose one of the products, and setup will restart itself
with the actual XML file corresponding to the product.

Here are the rules to write a meta-installation XML file :

- Specify the "meta" attribute in the top-level install attribute (value must
  be "yes").
- Do not specify any files for each option. All of the options must have the
  "product" attribute set to the name of the XML file for the particular product.
  Note that the file name must be given relative to setup's startup directory, so
  don't forget to prepend "setup.data" if appropriate.
- One of the options should have the "install=true" attribute, to specify a default
  selection.
- README and EULA files can be specified, but won't be installed.

Here is a sample XML meta-installation specification :

<?xml version="1.0" standalone="yes"?>
<install product="Meta Install" desc="Loki Demo Disc" version="1.0" meta="yes">
  <readme>README</readme>
  <option product="setup.data/civ.xml" install="true">
  Civ: CTP
  </option>
  <option product="setup.data/heroes3.xml">
  Heroes3
  </option>
  <option product="setup.data/myth2.xml">
  Myth II
  </option>
</install>


-------------------------------------------------------------------------

Example XML product specification:
(Note:  There can be no comments within the file itself, so we will denote
        comments using '# ..." notation)

<?xml version="1.0" standalone="yes"?>
<install product="foo" desc="An example product" version="1.0"
         path="/opt"
         preinstall="sh setup.data/foo-preinst.sh $*"
         postinstall="sh setup.data/foo-postinst.sh $*"
         url="http://www.products.kom/foo/index.html"
>
  <eula>license.txt</eula>
  <eula lang="fr">license-fr.txt</eula>
  <readme>README</readme>
  # This installs a product named "foo" in /opt/foo by default.
  # The user may specify a different installation directory.
  # The installer will prompt the user with the license contained in the
  # file "license.txt", and will execute foo-preinst.sh and foo-postinst.sh
  # before and after installing the product.  When the product is finished
  # installing, a browser will be launched to the site:
  #     http://www.products.kom/foo/index.html

    <option install="true">
        Base Install  # Option called "Base Install" contains a binary,
                      # some data files, and two optional editors.
        <help>Required for use</help>
        <help lang="fr">Requis pour utilisation</help>
        <binary arch="any" libc="any" symlink="foo" icon="icon.xpm">
            foo
        </binary>
        <files lang="fr">
            README.fr
        <files>
        <files>
            icon.xpm
            edit.xpm
            data/*.dat
        </files>
        <option>
            Curses Editor
            <help>Terminal editor for foo data files</help>
            <binary arch="any" libc="any">
                foo-edit.ncurses
            </binary>
        </option>
        <option>
            Motif Editor
            <help>X windows editor for foo data files</help>
            <binary arch="any" libc="any">
                foo-edit.motif
            </binary>
        </option>
        <script>
            # A script to finish the editor installation
            # It would set the default editor and edit desktop menu items
            # The first parameter to the script is the install path
            sh setup.data/edit-postinst.sh $*
        </script>
    </option>
    <option size="12M">
        Extra Data  # Option called "Extra Data" contains extra files
        <files>
            extra/*.dat
        </files>
    </option>
</install>

-------------------------------------------------------------------------
